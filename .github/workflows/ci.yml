name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Job 1: Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 📦 Install Dependencies
        run: |
          npm ci --no-audit
          npm ls --depth=0

      - name: 🎨 Format Check
        run: npm run format:check

      - name: 🔍 Lint Check
        run: |
          # Add ESLint if not present
          if [ ! -f ".eslintrc.json" ] && [ ! -f ".eslintrc.js" ]; then
            echo "⚠️  No ESLint config found, skipping lint check"
            echo "Consider adding ESLint for better code quality"
          else
            npm run lint
          fi

      - name: 🛡️ Security Audit
        run: |
          npm audit --audit-level=moderate
          # Check for known vulnerabilities
          npx audit-ci --moderate

      - name: 📊 Dependency Check
        run: |
          # Check for outdated dependencies
          npm outdated || true
          # Check for unused dependencies
          npx depcheck || true

  # Job 2: Build & Type Checking
  build:
    name: Build & Type Check
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 🔍 TypeScript Check
        run: |
          npx tsc --noEmit --pretty
          echo "✅ TypeScript compilation check passed"

      - name: 🏗️ Build Project
        run: |
          npm run build
          echo "✅ Build completed successfully"

      - name: 📁 Verify Build Output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi

          if [ ! -f "dist/index.js" ]; then
            echo "❌ Build failed: dist/index.js not found"
            exit 1
          fi

          echo "✅ Build artifacts verified"
          ls -la dist/

      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Job 3: Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: ['18', '20', '22']

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 💾 Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 🔧 Make Scripts Executable
        run: chmod +x dist/*.js

      - name: 🧪 Run Basic Tests
        run: |
          echo "🧪 Running basic smoke tests"
          if [ -f "tests/test.js" ]; then
            timeout 30s node tests/test.js || {
              echo "❌ Basic test failed or timed out"
              exit 1
            }
          else
            echo "⚠️  No test.js found, running manual server test"
            timeout 10s node dist/index.js &
            sleep 2
            pkill -f "node dist/index.js" || true
          fi

      - name: 🔍 Comprehensive Tests
        run: |
          echo "🔍 Running comprehensive verification"
          if [ -f "tests/final-verification.js" ]; then
            timeout 60s node tests/final-verification.js || {
              echo "❌ Comprehensive test failed or timed out"
              exit 1
            }
          else
            echo "⚠️  No final-verification.js found"
          fi

      - name: 🚀 Test MCP Server Startup
        run: |
          echo "🚀 Testing MCP server startup and basic functionality"
          timeout 15s node dist/index.js &
          SERVER_PID=$!
          sleep 3

          # Test if server is responsive
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "✅ MCP server started successfully"
            kill $SERVER_PID 2>/dev/null || true
          else
            echo "❌ MCP server failed to start"
            exit 1
          fi

  # Job 4: Package & Publish (only on main/master)
  package:
    name: Package & Release
    runs-on: ubuntu-latest
    needs: [quality, build, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 💾 Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 🔧 Make Scripts Executable
        run: chmod +x dist/*.js

      - name: 📋 Verify Package Contents
        run: |
          echo "📋 Verifying package contents"
          npm pack --dry-run

          echo "📁 Package will include:"
          npm run build # Ensure fresh build
          ls -la dist/

      - name: 🏷️ Create Release Package
        if: success()
        run: |
          echo "🏷️ Creating release package"
          npm pack
          echo "✅ Package created successfully"

      - name: 💾 Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ github.sha }}
          path: '*.tgz'
          retention-days: 30

  # Job 5: Cross-Platform Compatibility
  compatibility:
    name: Cross-Platform Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20']

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 💾 Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 🔧 Make Scripts Executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x dist/*.js

      - name: 🧪 Test Server on ${{ matrix.os }}
        shell: bash
        run: |
          echo "🧪 Testing MCP server on ${{ matrix.os }}"

          # Start server in background with timeout
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            timeout 10 node dist/index.js &
          else
            timeout 10s node dist/index.js &
          fi

          SERVER_PID=$!
          sleep 2

          # Check if server is running
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            tasklist /FI "PID eq $SERVER_PID" 2>/dev/null | grep -q "node.exe" && echo "✅ Server running on Windows"
          else
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "✅ Server running on ${{ runner.os }}"
              kill $SERVER_PID 2>/dev/null || true
            else
              echo "❌ Server failed to start on ${{ runner.os }}"
              exit 1
            fi
          fi

  # Job 6: Performance & Size Check
  performance:
    name: Performance & Bundle Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --no-audit

      - name: 💾 Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 📏 Bundle Size Analysis
        run: |
          echo "📏 Analyzing bundle size"

          # Check dist directory size
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "📦 Distribution size: $DIST_SIZE"

          # Check individual file sizes
          echo "📁 File breakdown:"
          ls -lh dist/

          # Check if bundle is reasonable size (< 10MB)
          DIST_SIZE_BYTES=$(du -sb dist/ | cut -f1)
          if [ $DIST_SIZE_BYTES -gt 10485760 ]; then
            echo "⚠️  Warning: Bundle size is quite large (>10MB)"
          else
            echo "✅ Bundle size is acceptable"
          fi

      - name: ⚡ Startup Performance Test
        run: |
          echo "⚡ Testing startup performance"

          # Measure startup time
          START_TIME=$(date +%s%N)
          timeout 5s node dist/index.js &
          SERVER_PID=$!
          sleep 1

          if kill -0 $SERVER_PID 2>/dev/null; then
            END_TIME=$(date +%s%N)
            STARTUP_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
            echo "⚡ Startup time: ${STARTUP_TIME}ms"

            if [ $STARTUP_TIME -gt 5000 ]; then
              echo "⚠️  Warning: Slow startup time (>5s)"
            else
              echo "✅ Startup performance acceptable"
            fi

            kill $SERVER_PID 2>/dev/null || true
          else
            echo "❌ Server failed to start for performance test"
            exit 1
          fi

  # Job 7: Deployment Status
  status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [quality, build, test, package, compatibility, performance]
    if: always()

    steps:
      - name: 📊 Report Status
        run: |
          echo "📊 CI/CD Pipeline Status Report"
          echo "================================"
          echo "Quality Check: ${{ needs.quality.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Package: ${{ needs.package.result }}"
          echo "Compatibility: ${{ needs.compatibility.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "================================"

          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ Pipeline completed successfully!"
            echo "🚀 Ready for deployment"
          else
            echo "❌ Pipeline failed - check logs above"
            exit 1
          fi

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 All checks passed!"
          echo "📦 Package is ready for distribution"
          echo "🚀 MCP server is production-ready"
